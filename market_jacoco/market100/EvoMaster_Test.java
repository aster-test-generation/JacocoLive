import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-04-23T12:53:57.608237-04:00[America/Kentucky/Monticello]
 * <br>
*  The generated test suite contains 30 tests
 * <br>
*  Covered targets: 87
 * <br>
*  Used time: 1h 0m 0s
 * <br>
*  Needed budget for current results: 2%
 * <br>
*  
*/
public class EvoMaster_Test {

    
    private static String baseUrlOfSut = "http://localhost:12345/";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (500) POST:/register
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/register
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 500 not defined for path '/register'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"\", " + 
                    " \"href\": \"sozBCxSQXkoBjeR\", " + 
                    " \"media\": \"046gfDAdDkcxdl\", " + 
                    " \"name\": \"vU6I0lm0q6wcZHxG\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_2_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"8AnCHW\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"bBa7z1KRxoE5QMc6\", " + 
                    " \"media\": \"iaRbQhYwoaBy_z\", " + 
                    " \"profile\": \"_MssSD\", " + 
                    " \"title\": \"7\" " + 
                    " } " + 
                    " ], " + 
                    " \"email\": \"4B8Dbxe\", " + 
                    " \"password\": \"X6\", " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/customer/contacts
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/contacts -> Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"R9p6DMj4TGqIzTmD\", " + 
                    " \"href\": \"x\", " + 
                    " \"hreflang\": \"bIpIBG8f\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_1_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"\", " + 
                    " \"type\": \"eZhA5uiYfT0QkDA\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"2tMnMp_hwuDhVxA4\", " + 
                    " \"href\": \"\", " + 
                    " \"hreflang\": \"efR6XWPQhiDCex\", " + 
                    " \"media\": \"zJoJ\", " + 
                    " \"profile\": \"7bxsalL88EIQglgE\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_1_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"urneVaW7l1xb\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"\", " + 
                    " \"hreflang\": \"Gr0YeoZhQg\", " + 
                    " \"name\": \"4Y8ppvPf8F\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"HNHOxM52\", " + 
                    " \"name\": \"BGK\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_1_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"quRflSaDq\", " + 
                    " \"type\": \"b1zxY\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"4oIfTBd\", " + 
                    " \"hreflang\": \"iKVVmJ1W\", " + 
                    " \"media\": \"MtXVMsdf91O\", " + 
                    " \"name\": \"0\", " + 
                    " \"type\": \"KhqyO6oqhh6\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"Tk\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/customer/contacts
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/contacts -> Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"6DT44Qm\", " + 
                    " \"href\": \"5bvrZOFuUVovBj\", " + 
                    " \"profile\": \"uaqWn\", " + 
                    " \"title\": \"v6k9D7V\", " + 
                    " \"type\": \"AYFAoDb38RUAATe\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"w9teGhWXM3Hn1ve\", " + 
                    " \"name\": \"MCgBxR18uqKSMl6f\", " + 
                    " \"profile\": \"bgmgaDK\", " + 
                    " \"title\": \"yuEHwK\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"SRBOa4rv7\", " + 
                    " \"href\": \"gZUHfniIWgEynMV\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_1_XYZ_\" " + 
                    " }, " + 
                    " \"type\": \"OpSXRNO7D\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"40HVKz\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?name=MaZZPVct")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/cart
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/customer/cart
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> Response status 500 not defined for path '/customer/cart'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"href\": \"x\", " + 
                    " \"hreflang\": \"WkPGtkb2fWE6U\", " + 
                    " \"name\": \"QRuq4Lk0eRE8C\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"C2FV3T6g9\", " + 
                    " \"hreflang\": \"I9FBgqta0W\", " + 
                    " \"name\": \"p\", " + 
                    " \"profile\": \"saD2fuTg52X8urP\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"F75M3ABo\", " + 
                    " \"name\": \"eLhq93ANzRXxk\", " + 
                    " \"profile\": \"acfWevOnsOl\", " + 
                    " \"type\": \"1oClx\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"f6rmxLDy1giu\", " + 
                    " \"media\": \"QDllMX0giXgU\", " + 
                    " \"profile\": \"GfM\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"x9i7JhUWf1YLw\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"YyCuYU\", " + 
                    " \"href\": \"l3TjyVSXRtk7\", " + 
                    " \"media\": \"\", " + 
                    " \"name\": \"mPu7b\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"KG4YqkTtj\", " + 
                    " \"type\": \"YIl4mQ4\" " + 
                    " } " + 
                    " ], " + 
                    " \"productId\": 924, " + 
                    " \"quantity\": 828 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/cart
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/customer/cart
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> Response status 500 not defined for path '/customer/cart'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"quantity\": 410 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=LvBz1gnaiSfc")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products
    */
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs/
    */
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs/")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/contacts
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/customer/cart?name=5G1MOOwycBjp9Tu")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/cart?name=koH5wSfg8r")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer?name=YZF")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/contacts
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/contacts?name=r")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders?name=o3v")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders/68?name=kzi_1uuklmtz2X")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders/68"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders/803")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders/803"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 1911137945, " + 
                    " \"quantity\": 787 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders/-534756801?name=")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders/-534756801"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart/delivery
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> No response body is expected but one was found.
        given().accept("*/*")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=false&" + 
                    "name=pSmjy1dB4RIps")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart/delivery
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> No response body is expected but one was found.
        given().accept("*/*")
                .put(baseUrlOfSut + "/customer/cart/delivery?included=true")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (404) GET:/products/{productId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products/{productId} -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/240")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/240"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/products/{productId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products/{productId} -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/-6747728939492837241")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/-6747728939492837241"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/register
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"T5wr05sWaf8UTvc\", " + 
                    " \"password\": \"1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(4))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("password"))
                .body("'fieldErrors'[1].'message'", containsString("Length shall be between 6 and 50 characters"))
                .body("'fieldErrors'[2].'field'", containsString("phone"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall not be empty"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/contacts
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/contacts -> Response status 406 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("address"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("phone"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=EVM5Xb3r")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(3))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Card number shall consist of 13-16 digits"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[2].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[2].'message'", containsString("Not a valid credit card number"));
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> Response status 406 not defined for path '/customer/cart'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": -7905185496873315653 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("cartItemDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("productId"))
                .body("'fieldErrors'[0].'message'", containsString("Value shall be a positive number"))
                .body("'fieldErrors'[1].'field'", containsString("quantity"))
                .body("'fieldErrors'[1].'message'", containsString("Value shall be a positive number"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
    }


}
